#pragma kernel Clear
#pragma kernel Compute
#pragma kernel MixTo1
#pragma kernel MixTo2

Texture2D<float4> _Spectrum;
RWTexture3D<float2> _Variance;
RWTexture3D<float> _VarianceX;
RWTexture3D<float> _VarianceY;
RWTexture3D<float> _PreviousVarianceX;
RWTexture3D<float> _PreviousVarianceY;

float _FFTSize;
float _VariancesSize;
float _TileSize;
float4 _Coordinates;
float _MixWeight;

float2 GetSlopeVariance(float2 k, float A, float B, float C, float2 spectrumSample)
{ 
	float w = 1.0 - exp(A * k.x * k.x + B * k.x * k.y + C * k.y * k.y); 
	float2 kw = k * w; 
	return kw * kw * dot(spectrumSample, spectrumSample) * 2.0; 
}

[numthreads(4,4,4)]
void Clear(uint3 id : SV_DispatchThreadID)
{
	_VarianceX[id] = 0.0;
	_VarianceY[id] = 0.0;
}

[numthreads(4,4,4)]
void Compute(uint3 id : SV_DispatchThreadID)
{
	const float SCALE = 10.0;
	
	float A = pow(id.x / (_VariancesSize - 1.0), 4.0) * SCALE; 
	float C = pow(id.z / (_VariancesSize - 1.0), 4.0) * SCALE; 
	float B = (2.0 * id.y / (_VariancesSize - 1.0) - 1.0) * sqrt(A * C); 
	A = -0.5 * A; 
	B = -B; 
	C = -0.5 * C;
	
	float2 variance = float2(0.0, 0.0);
	
	for(int y = _Coordinates.x; y < _Coordinates.y; ++y)
	{ 
		int j = y >= _FFTSize / 2 ? y - _FFTSize : y;
	
		for(int x = 0; x < _FFTSize; ++x)
		{ 
			int i = x >= _FFTSize / 2 ? x - _FFTSize : x; 
			
			float2 k = 2.0 * 3.14159 * float2(i, j) / _TileSize;

			float2 spectrum = _Spectrum[uint2(x, y)].xy;
			variance += GetSlopeVariance(k, A, B, C, spectrum);
		}
	}

	_VarianceX[id] += variance.x * 6.0;
	_VarianceY[id] += variance.y * 6.0;
}

[numthreads(4,4,4)]
void MixTo1(uint3 id : SV_DispatchThreadID)
{
	_Variance[id] = float2(_VarianceX[id], _VarianceY[id]) + float2(_PreviousVarianceX[id], _PreviousVarianceY[id]) * _MixWeight;
}

[numthreads(4,4,4)]
void MixTo2(uint3 id : SV_DispatchThreadID)
{
	_PreviousVarianceX[id] = _VarianceX[id] + _PreviousVarianceX[id] * _MixWeight;
	_PreviousVarianceY[id] = _VarianceY[id] + _PreviousVarianceY[id] * _MixWeight;
}
